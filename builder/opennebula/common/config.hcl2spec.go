// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package opennebula

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	PackerBuildName           *string             `mapstructure:"packer_build_name" cty:"packer_build_name" hcl:"packer_build_name"`
	PackerBuilderType         *string             `mapstructure:"packer_builder_type" cty:"packer_builder_type" hcl:"packer_builder_type"`
	PackerCoreVersion         *string             `mapstructure:"packer_core_version" cty:"packer_core_version" hcl:"packer_core_version"`
	PackerDebug               *bool               `mapstructure:"packer_debug" cty:"packer_debug" hcl:"packer_debug"`
	PackerForce               *bool               `mapstructure:"packer_force" cty:"packer_force" hcl:"packer_force"`
	PackerOnError             *string             `mapstructure:"packer_on_error" cty:"packer_on_error" hcl:"packer_on_error"`
	PackerUserVars            map[string]string   `mapstructure:"packer_user_variables" cty:"packer_user_variables" hcl:"packer_user_variables"`
	PackerSensitiveVars       []string            `mapstructure:"packer_sensitive_variables" cty:"packer_sensitive_variables" hcl:"packer_sensitive_variables"`
	HTTPDir                   *string             `mapstructure:"http_directory" cty:"http_directory" hcl:"http_directory"`
	HTTPContent               map[string]string   `mapstructure:"http_content" cty:"http_content" hcl:"http_content"`
	HTTPPortMin               *int                `mapstructure:"http_port_min" cty:"http_port_min" hcl:"http_port_min"`
	HTTPPortMax               *int                `mapstructure:"http_port_max" cty:"http_port_max" hcl:"http_port_max"`
	HTTPAddress               *string             `mapstructure:"http_bind_address" cty:"http_bind_address" hcl:"http_bind_address"`
	HTTPInterface             *string             `mapstructure:"http_interface" undocumented:"true" cty:"http_interface" hcl:"http_interface"`
	Datastore                 *string             `mapstructure:"datastore" cty:"datastore" hcl:"datastore"`
	Debug                     *bool               `mapstructure:"debug" cty:"debug" hcl:"debug"`
	EjectISO                  *bool               `mapstructure:"eject_iso" cty:"eject_iso" hcl:"eject_iso"`
	EjectISODelay             *string             `mapstructure:"eject_iso_delay" cty:"eject_iso_delay" hcl:"eject_iso_delay"`
	SnapshotConfig            *FlatSnapshotConfig `mapstructure:"snapshot" cty:"snapshot" hcl:"snapshot"`
	ImageConfigs              []FlatImageConfig   `mapstructure:"image" cty:"image" hcl:"image"`
	OpenNebulaURL             *string             `mapstructure:"opennebula_url" cty:"opennebula_url" hcl:"opennebula_url"`
	Username                  *string             `mapstructure:"username" cty:"username" hcl:"username"`
	Password                  *string             `mapstructure:"password" cty:"password" hcl:"password"`
	Insecure                  *bool               `mapstructure:"insecure" cty:"insecure" hcl:"insecure"`
	Name                      *string             `mapstructure:"vm_name" cty:"vm_name" hcl:"vm_name"`
	CPU                       *float64            `mapstructure:"vm_cpu" cty:"vm_cpu" hcl:"vm_cpu"`
	CPUModel                  *string             `mapstructure:"vm_cpu_model" cty:"vm_cpu_model" hcl:"vm_cpu_model"`
	Description               *string             `mapstructure:"vm_description" cty:"vm_description" hcl:"vm_description"`
	EnableVNC                 *bool               `mapstructure:"enable_vnc" cty:"enable_vnc" hcl:"enable_vnc"`
	GraphicsKeymap            *string             `mapstructure:"vm_graphics_keymap" cty:"vm_graphics_keymap" hcl:"vm_graphics_keymap"`
	GraphicsListen            *string             `mapstructure:"vm_graphics_listen" cty:"vm_graphics_listen" hcl:"vm_graphics_listen"`
	GraphicsType              *string             `mapstructure:"vm_graphics_type" cty:"vm_graphics_type" hcl:"vm_graphics_type"`
	Hypervisor                *string             `mapstructure:"vm_hypervisor" cty:"vm_hypervisor" hcl:"vm_hypervisor"`
	Logo                      *string             `mapstructure:"vm_logo" cty:"vm_logo" hcl:"vm_logo"`
	Memory                    *int                `mapstructure:"vm_memory" cty:"vm_memory" hcl:"vm_memory"`
	NICs                      []FlatNICConfig     `mapstructure:"vm_nics" cty:"vm_nics" hcl:"vm_nics"`
	OSArch                    *string             `mapstructure:"vm_os_arch" cty:"vm_os_arch" hcl:"vm_os_arch"`
	OSBoot                    *string             `mapstructure:"vm_os_boot" cty:"vm_os_boot" hcl:"vm_os_boot"`
	VCPU                      *int                `mapstructure:"vm_vcpu" cty:"vm_vcpu" hcl:"vm_vcpu"`
	UserData                  *string             `mapstructure:"vm_user_data" cty:"vm_user_data" hcl:"vm_user_data"`
	BootGroupInterval         *string             `mapstructure:"boot_keygroup_interval" cty:"boot_keygroup_interval" hcl:"boot_keygroup_interval"`
	BootWait                  *string             `mapstructure:"boot_wait" cty:"boot_wait" hcl:"boot_wait"`
	BootCommand               []string            `mapstructure:"boot_command" cty:"boot_command" hcl:"boot_command"`
	DisableVNC                *bool               `mapstructure:"disable_vnc" cty:"disable_vnc" hcl:"disable_vnc"`
	BootKeyInterval           *string             `mapstructure:"boot_key_interval" cty:"boot_key_interval" hcl:"boot_key_interval"`
	VNCPassword               *string             `mapstructure:"vm_vnc_password,omitempty" cty:"vm_vnc_password" hcl:"vm_vnc_password"`
	VNCIP                     *string             `mapstructure:"vnc_ip" required:"false" cty:"vnc_ip" hcl:"vnc_ip"`
	VNCPort                   *int                `mapstructure:"vnc_port" required:"false" cty:"vnc_port" hcl:"vnc_port"`
	BootSteps                 [][]string          `mapstructure:"boot_steps" required:"false" cty:"boot_steps" hcl:"boot_steps"`
	Type                      *string             `mapstructure:"communicator" cty:"communicator" hcl:"communicator"`
	PauseBeforeConnect        *string             `mapstructure:"pause_before_connecting" cty:"pause_before_connecting" hcl:"pause_before_connecting"`
	SSHHost                   *string             `mapstructure:"ssh_host" cty:"ssh_host" hcl:"ssh_host"`
	SSHPort                   *int                `mapstructure:"ssh_port" cty:"ssh_port" hcl:"ssh_port"`
	SSHUsername               *string             `mapstructure:"ssh_username" cty:"ssh_username" hcl:"ssh_username"`
	SSHPassword               *string             `mapstructure:"ssh_password" cty:"ssh_password" hcl:"ssh_password"`
	SSHKeyPairName            *string             `mapstructure:"ssh_keypair_name" undocumented:"true" cty:"ssh_keypair_name" hcl:"ssh_keypair_name"`
	SSHTemporaryKeyPairName   *string             `mapstructure:"temporary_key_pair_name" undocumented:"true" cty:"temporary_key_pair_name" hcl:"temporary_key_pair_name"`
	SSHTemporaryKeyPairType   *string             `mapstructure:"temporary_key_pair_type" cty:"temporary_key_pair_type" hcl:"temporary_key_pair_type"`
	SSHTemporaryKeyPairBits   *int                `mapstructure:"temporary_key_pair_bits" cty:"temporary_key_pair_bits" hcl:"temporary_key_pair_bits"`
	SSHCiphers                []string            `mapstructure:"ssh_ciphers" cty:"ssh_ciphers" hcl:"ssh_ciphers"`
	SSHClearAuthorizedKeys    *bool               `mapstructure:"ssh_clear_authorized_keys" cty:"ssh_clear_authorized_keys" hcl:"ssh_clear_authorized_keys"`
	SSHKEXAlgos               []string            `mapstructure:"ssh_key_exchange_algorithms" cty:"ssh_key_exchange_algorithms" hcl:"ssh_key_exchange_algorithms"`
	SSHPrivateKeyFile         *string             `mapstructure:"ssh_private_key_file" undocumented:"true" cty:"ssh_private_key_file" hcl:"ssh_private_key_file"`
	SSHCertificateFile        *string             `mapstructure:"ssh_certificate_file" cty:"ssh_certificate_file" hcl:"ssh_certificate_file"`
	SSHPty                    *bool               `mapstructure:"ssh_pty" cty:"ssh_pty" hcl:"ssh_pty"`
	SSHTimeout                *string             `mapstructure:"ssh_timeout" cty:"ssh_timeout" hcl:"ssh_timeout"`
	SSHWaitTimeout            *string             `mapstructure:"ssh_wait_timeout" undocumented:"true" cty:"ssh_wait_timeout" hcl:"ssh_wait_timeout"`
	SSHAgentAuth              *bool               `mapstructure:"ssh_agent_auth" undocumented:"true" cty:"ssh_agent_auth" hcl:"ssh_agent_auth"`
	SSHDisableAgentForwarding *bool               `mapstructure:"ssh_disable_agent_forwarding" cty:"ssh_disable_agent_forwarding" hcl:"ssh_disable_agent_forwarding"`
	SSHHandshakeAttempts      *int                `mapstructure:"ssh_handshake_attempts" cty:"ssh_handshake_attempts" hcl:"ssh_handshake_attempts"`
	SSHBastionHost            *string             `mapstructure:"ssh_bastion_host" cty:"ssh_bastion_host" hcl:"ssh_bastion_host"`
	SSHBastionPort            *int                `mapstructure:"ssh_bastion_port" cty:"ssh_bastion_port" hcl:"ssh_bastion_port"`
	SSHBastionAgentAuth       *bool               `mapstructure:"ssh_bastion_agent_auth" cty:"ssh_bastion_agent_auth" hcl:"ssh_bastion_agent_auth"`
	SSHBastionUsername        *string             `mapstructure:"ssh_bastion_username" cty:"ssh_bastion_username" hcl:"ssh_bastion_username"`
	SSHBastionPassword        *string             `mapstructure:"ssh_bastion_password" cty:"ssh_bastion_password" hcl:"ssh_bastion_password"`
	SSHBastionInteractive     *bool               `mapstructure:"ssh_bastion_interactive" cty:"ssh_bastion_interactive" hcl:"ssh_bastion_interactive"`
	SSHBastionPrivateKeyFile  *string             `mapstructure:"ssh_bastion_private_key_file" cty:"ssh_bastion_private_key_file" hcl:"ssh_bastion_private_key_file"`
	SSHBastionCertificateFile *string             `mapstructure:"ssh_bastion_certificate_file" cty:"ssh_bastion_certificate_file" hcl:"ssh_bastion_certificate_file"`
	SSHFileTransferMethod     *string             `mapstructure:"ssh_file_transfer_method" cty:"ssh_file_transfer_method" hcl:"ssh_file_transfer_method"`
	SSHProxyHost              *string             `mapstructure:"ssh_proxy_host" cty:"ssh_proxy_host" hcl:"ssh_proxy_host"`
	SSHProxyPort              *int                `mapstructure:"ssh_proxy_port" cty:"ssh_proxy_port" hcl:"ssh_proxy_port"`
	SSHProxyUsername          *string             `mapstructure:"ssh_proxy_username" cty:"ssh_proxy_username" hcl:"ssh_proxy_username"`
	SSHProxyPassword          *string             `mapstructure:"ssh_proxy_password" cty:"ssh_proxy_password" hcl:"ssh_proxy_password"`
	SSHKeepAliveInterval      *string             `mapstructure:"ssh_keep_alive_interval" cty:"ssh_keep_alive_interval" hcl:"ssh_keep_alive_interval"`
	SSHReadWriteTimeout       *string             `mapstructure:"ssh_read_write_timeout" cty:"ssh_read_write_timeout" hcl:"ssh_read_write_timeout"`
	SSHRemoteTunnels          []string            `mapstructure:"ssh_remote_tunnels" cty:"ssh_remote_tunnels" hcl:"ssh_remote_tunnels"`
	SSHLocalTunnels           []string            `mapstructure:"ssh_local_tunnels" cty:"ssh_local_tunnels" hcl:"ssh_local_tunnels"`
	SSHPublicKey              []byte              `mapstructure:"ssh_public_key" undocumented:"true" cty:"ssh_public_key" hcl:"ssh_public_key"`
	SSHPrivateKey             []byte              `mapstructure:"ssh_private_key" undocumented:"true" cty:"ssh_private_key" hcl:"ssh_private_key"`
	WinRMUser                 *string             `mapstructure:"winrm_username" cty:"winrm_username" hcl:"winrm_username"`
	WinRMPassword             *string             `mapstructure:"winrm_password" cty:"winrm_password" hcl:"winrm_password"`
	WinRMHost                 *string             `mapstructure:"winrm_host" cty:"winrm_host" hcl:"winrm_host"`
	WinRMNoProxy              *bool               `mapstructure:"winrm_no_proxy" cty:"winrm_no_proxy" hcl:"winrm_no_proxy"`
	WinRMPort                 *int                `mapstructure:"winrm_port" cty:"winrm_port" hcl:"winrm_port"`
	WinRMTimeout              *string             `mapstructure:"winrm_timeout" cty:"winrm_timeout" hcl:"winrm_timeout"`
	WinRMUseSSL               *bool               `mapstructure:"winrm_use_ssl" cty:"winrm_use_ssl" hcl:"winrm_use_ssl"`
	WinRMInsecure             *bool               `mapstructure:"winrm_insecure" cty:"winrm_insecure" hcl:"winrm_insecure"`
	WinRMUseNTLM              *bool               `mapstructure:"winrm_use_ntlm" cty:"winrm_use_ntlm" hcl:"winrm_use_ntlm"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"packer_build_name":            &hcldec.AttrSpec{Name: "packer_build_name", Type: cty.String, Required: false},
		"packer_builder_type":          &hcldec.AttrSpec{Name: "packer_builder_type", Type: cty.String, Required: false},
		"packer_core_version":          &hcldec.AttrSpec{Name: "packer_core_version", Type: cty.String, Required: false},
		"packer_debug":                 &hcldec.AttrSpec{Name: "packer_debug", Type: cty.Bool, Required: false},
		"packer_force":                 &hcldec.AttrSpec{Name: "packer_force", Type: cty.Bool, Required: false},
		"packer_on_error":              &hcldec.AttrSpec{Name: "packer_on_error", Type: cty.String, Required: false},
		"packer_user_variables":        &hcldec.AttrSpec{Name: "packer_user_variables", Type: cty.Map(cty.String), Required: false},
		"packer_sensitive_variables":   &hcldec.AttrSpec{Name: "packer_sensitive_variables", Type: cty.List(cty.String), Required: false},
		"http_directory":               &hcldec.AttrSpec{Name: "http_directory", Type: cty.String, Required: false},
		"http_content":                 &hcldec.AttrSpec{Name: "http_content", Type: cty.Map(cty.String), Required: false},
		"http_port_min":                &hcldec.AttrSpec{Name: "http_port_min", Type: cty.Number, Required: false},
		"http_port_max":                &hcldec.AttrSpec{Name: "http_port_max", Type: cty.Number, Required: false},
		"http_bind_address":            &hcldec.AttrSpec{Name: "http_bind_address", Type: cty.String, Required: false},
		"http_interface":               &hcldec.AttrSpec{Name: "http_interface", Type: cty.String, Required: false},
		"datastore":                    &hcldec.AttrSpec{Name: "datastore", Type: cty.String, Required: false},
		"debug":                        &hcldec.AttrSpec{Name: "debug", Type: cty.Bool, Required: false},
		"eject_iso":                    &hcldec.AttrSpec{Name: "eject_iso", Type: cty.Bool, Required: false},
		"eject_iso_delay":              &hcldec.AttrSpec{Name: "eject_iso_delay", Type: cty.String, Required: false},
		"snapshot":                     &hcldec.BlockSpec{TypeName: "snapshot", Nested: hcldec.ObjectSpec((*FlatSnapshotConfig)(nil).HCL2Spec())},
		"image":                        &hcldec.BlockListSpec{TypeName: "image", Nested: hcldec.ObjectSpec((*FlatImageConfig)(nil).HCL2Spec())},
		"opennebula_url":               &hcldec.AttrSpec{Name: "opennebula_url", Type: cty.String, Required: false},
		"username":                     &hcldec.AttrSpec{Name: "username", Type: cty.String, Required: false},
		"password":                     &hcldec.AttrSpec{Name: "password", Type: cty.String, Required: false},
		"insecure":                     &hcldec.AttrSpec{Name: "insecure", Type: cty.Bool, Required: false},
		"vm_name":                      &hcldec.AttrSpec{Name: "vm_name", Type: cty.String, Required: false},
		"vm_cpu":                       &hcldec.AttrSpec{Name: "vm_cpu", Type: cty.Number, Required: false},
		"vm_cpu_model":                 &hcldec.AttrSpec{Name: "vm_cpu_model", Type: cty.String, Required: false},
		"vm_description":               &hcldec.AttrSpec{Name: "vm_description", Type: cty.String, Required: false},
		"enable_vnc":                   &hcldec.AttrSpec{Name: "enable_vnc", Type: cty.Bool, Required: false},
		"vm_graphics_keymap":           &hcldec.AttrSpec{Name: "vm_graphics_keymap", Type: cty.String, Required: false},
		"vm_graphics_listen":           &hcldec.AttrSpec{Name: "vm_graphics_listen", Type: cty.String, Required: false},
		"vm_graphics_type":             &hcldec.AttrSpec{Name: "vm_graphics_type", Type: cty.String, Required: false},
		"vm_hypervisor":                &hcldec.AttrSpec{Name: "vm_hypervisor", Type: cty.String, Required: false},
		"vm_logo":                      &hcldec.AttrSpec{Name: "vm_logo", Type: cty.String, Required: false},
		"vm_memory":                    &hcldec.AttrSpec{Name: "vm_memory", Type: cty.Number, Required: false},
		"vm_nics":                      &hcldec.BlockListSpec{TypeName: "vm_nics", Nested: hcldec.ObjectSpec((*FlatNICConfig)(nil).HCL2Spec())},
		"vm_os_arch":                   &hcldec.AttrSpec{Name: "vm_os_arch", Type: cty.String, Required: false},
		"vm_os_boot":                   &hcldec.AttrSpec{Name: "vm_os_boot", Type: cty.String, Required: false},
		"vm_vcpu":                      &hcldec.AttrSpec{Name: "vm_vcpu", Type: cty.Number, Required: false},
		"vm_user_data":                 &hcldec.AttrSpec{Name: "vm_user_data", Type: cty.String, Required: false},
		"boot_keygroup_interval":       &hcldec.AttrSpec{Name: "boot_keygroup_interval", Type: cty.String, Required: false},
		"boot_wait":                    &hcldec.AttrSpec{Name: "boot_wait", Type: cty.String, Required: false},
		"boot_command":                 &hcldec.AttrSpec{Name: "boot_command", Type: cty.List(cty.String), Required: false},
		"disable_vnc":                  &hcldec.AttrSpec{Name: "disable_vnc", Type: cty.Bool, Required: false},
		"boot_key_interval":            &hcldec.AttrSpec{Name: "boot_key_interval", Type: cty.String, Required: false},
		"vm_vnc_password":              &hcldec.AttrSpec{Name: "vm_vnc_password", Type: cty.String, Required: false},
		"vnc_ip":                       &hcldec.AttrSpec{Name: "vnc_ip", Type: cty.String, Required: false},
		"vnc_port":                     &hcldec.AttrSpec{Name: "vnc_port", Type: cty.Number, Required: false},
		"boot_steps":                   &hcldec.AttrSpec{Name: "boot_steps", Type: cty.List(cty.List(cty.String)), Required: false},
		"communicator":                 &hcldec.AttrSpec{Name: "communicator", Type: cty.String, Required: false},
		"pause_before_connecting":      &hcldec.AttrSpec{Name: "pause_before_connecting", Type: cty.String, Required: false},
		"ssh_host":                     &hcldec.AttrSpec{Name: "ssh_host", Type: cty.String, Required: false},
		"ssh_port":                     &hcldec.AttrSpec{Name: "ssh_port", Type: cty.Number, Required: false},
		"ssh_username":                 &hcldec.AttrSpec{Name: "ssh_username", Type: cty.String, Required: false},
		"ssh_password":                 &hcldec.AttrSpec{Name: "ssh_password", Type: cty.String, Required: false},
		"ssh_keypair_name":             &hcldec.AttrSpec{Name: "ssh_keypair_name", Type: cty.String, Required: false},
		"temporary_key_pair_name":      &hcldec.AttrSpec{Name: "temporary_key_pair_name", Type: cty.String, Required: false},
		"temporary_key_pair_type":      &hcldec.AttrSpec{Name: "temporary_key_pair_type", Type: cty.String, Required: false},
		"temporary_key_pair_bits":      &hcldec.AttrSpec{Name: "temporary_key_pair_bits", Type: cty.Number, Required: false},
		"ssh_ciphers":                  &hcldec.AttrSpec{Name: "ssh_ciphers", Type: cty.List(cty.String), Required: false},
		"ssh_clear_authorized_keys":    &hcldec.AttrSpec{Name: "ssh_clear_authorized_keys", Type: cty.Bool, Required: false},
		"ssh_key_exchange_algorithms":  &hcldec.AttrSpec{Name: "ssh_key_exchange_algorithms", Type: cty.List(cty.String), Required: false},
		"ssh_private_key_file":         &hcldec.AttrSpec{Name: "ssh_private_key_file", Type: cty.String, Required: false},
		"ssh_certificate_file":         &hcldec.AttrSpec{Name: "ssh_certificate_file", Type: cty.String, Required: false},
		"ssh_pty":                      &hcldec.AttrSpec{Name: "ssh_pty", Type: cty.Bool, Required: false},
		"ssh_timeout":                  &hcldec.AttrSpec{Name: "ssh_timeout", Type: cty.String, Required: false},
		"ssh_wait_timeout":             &hcldec.AttrSpec{Name: "ssh_wait_timeout", Type: cty.String, Required: false},
		"ssh_agent_auth":               &hcldec.AttrSpec{Name: "ssh_agent_auth", Type: cty.Bool, Required: false},
		"ssh_disable_agent_forwarding": &hcldec.AttrSpec{Name: "ssh_disable_agent_forwarding", Type: cty.Bool, Required: false},
		"ssh_handshake_attempts":       &hcldec.AttrSpec{Name: "ssh_handshake_attempts", Type: cty.Number, Required: false},
		"ssh_bastion_host":             &hcldec.AttrSpec{Name: "ssh_bastion_host", Type: cty.String, Required: false},
		"ssh_bastion_port":             &hcldec.AttrSpec{Name: "ssh_bastion_port", Type: cty.Number, Required: false},
		"ssh_bastion_agent_auth":       &hcldec.AttrSpec{Name: "ssh_bastion_agent_auth", Type: cty.Bool, Required: false},
		"ssh_bastion_username":         &hcldec.AttrSpec{Name: "ssh_bastion_username", Type: cty.String, Required: false},
		"ssh_bastion_password":         &hcldec.AttrSpec{Name: "ssh_bastion_password", Type: cty.String, Required: false},
		"ssh_bastion_interactive":      &hcldec.AttrSpec{Name: "ssh_bastion_interactive", Type: cty.Bool, Required: false},
		"ssh_bastion_private_key_file": &hcldec.AttrSpec{Name: "ssh_bastion_private_key_file", Type: cty.String, Required: false},
		"ssh_bastion_certificate_file": &hcldec.AttrSpec{Name: "ssh_bastion_certificate_file", Type: cty.String, Required: false},
		"ssh_file_transfer_method":     &hcldec.AttrSpec{Name: "ssh_file_transfer_method", Type: cty.String, Required: false},
		"ssh_proxy_host":               &hcldec.AttrSpec{Name: "ssh_proxy_host", Type: cty.String, Required: false},
		"ssh_proxy_port":               &hcldec.AttrSpec{Name: "ssh_proxy_port", Type: cty.Number, Required: false},
		"ssh_proxy_username":           &hcldec.AttrSpec{Name: "ssh_proxy_username", Type: cty.String, Required: false},
		"ssh_proxy_password":           &hcldec.AttrSpec{Name: "ssh_proxy_password", Type: cty.String, Required: false},
		"ssh_keep_alive_interval":      &hcldec.AttrSpec{Name: "ssh_keep_alive_interval", Type: cty.String, Required: false},
		"ssh_read_write_timeout":       &hcldec.AttrSpec{Name: "ssh_read_write_timeout", Type: cty.String, Required: false},
		"ssh_remote_tunnels":           &hcldec.AttrSpec{Name: "ssh_remote_tunnels", Type: cty.List(cty.String), Required: false},
		"ssh_local_tunnels":            &hcldec.AttrSpec{Name: "ssh_local_tunnels", Type: cty.List(cty.String), Required: false},
		"ssh_public_key":               &hcldec.AttrSpec{Name: "ssh_public_key", Type: cty.List(cty.Number), Required: false},
		"ssh_private_key":              &hcldec.AttrSpec{Name: "ssh_private_key", Type: cty.List(cty.Number), Required: false},
		"winrm_username":               &hcldec.AttrSpec{Name: "winrm_username", Type: cty.String, Required: false},
		"winrm_password":               &hcldec.AttrSpec{Name: "winrm_password", Type: cty.String, Required: false},
		"winrm_host":                   &hcldec.AttrSpec{Name: "winrm_host", Type: cty.String, Required: false},
		"winrm_no_proxy":               &hcldec.AttrSpec{Name: "winrm_no_proxy", Type: cty.Bool, Required: false},
		"winrm_port":                   &hcldec.AttrSpec{Name: "winrm_port", Type: cty.Number, Required: false},
		"winrm_timeout":                &hcldec.AttrSpec{Name: "winrm_timeout", Type: cty.String, Required: false},
		"winrm_use_ssl":                &hcldec.AttrSpec{Name: "winrm_use_ssl", Type: cty.Bool, Required: false},
		"winrm_insecure":               &hcldec.AttrSpec{Name: "winrm_insecure", Type: cty.Bool, Required: false},
		"winrm_use_ntlm":               &hcldec.AttrSpec{Name: "winrm_use_ntlm", Type: cty.Bool, Required: false},
	}
	return s
}

// FlatImageConfig is an auto-generated flat version of ImageConfig.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatImageConfig struct {
	Image_ID             *int     `mapstructure:"id" cty:"id" hcl:"id"`
	Image_Name           *string  `mapstructure:"name" cty:"name" hcl:"name"`
	Image_Type           *string  `mapstructure:"type" cty:"type" hcl:"type"`
	Image_DatastoreID    *int     `mapstructure:"datastore_id" cty:"datastore_id" hcl:"datastore_id"`
	Image_Persistent     *bool    `mapstructure:"persistent" cty:"persistent" hcl:"persistent"`
	Image_Lock           *string  `mapstructure:"lock" cty:"lock" hcl:"lock"`
	Image_Permissions    *int     `mapstructure:"permissions" cty:"permissions" hcl:"permissions"`
	Image_Group          *string  `mapstructure:"group" cty:"group" hcl:"group"`
	Image_Path           *string  `mapstructure:"path" cty:"path" hcl:"path"`
	Image_DevPrefix      *string  `mapstructure:"dev_prefix" cty:"dev_prefix" hcl:"dev_prefix"`
	Image_Target         *string  `mapstructure:"target" cty:"target" hcl:"target"`
	Image_Driver         *string  `mapstructure:"driver" cty:"driver" hcl:"driver"`
	Image_Format         *string  `mapstructure:"format" cty:"format" hcl:"format"`
	Image_Size           *int     `mapstructure:"size" cty:"size" hcl:"size"`
	Image_CloneFromImage *string  `mapstructure:"clone_from_image" cty:"clone_from_image" hcl:"clone_from_image"`
	Image_Tags           []string `mapstructure:"tags" cty:"tags" hcl:"tags"`
}

// FlatMapstructure returns a new FlatImageConfig.
// FlatImageConfig is an auto-generated flat version of ImageConfig.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*ImageConfig) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatImageConfig)
}

// HCL2Spec returns the hcl spec of a ImageConfig.
// This spec is used by HCL to read the fields of ImageConfig.
// The decoded values from this spec will then be applied to a FlatImageConfig.
func (*FlatImageConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"id":               &hcldec.AttrSpec{Name: "id", Type: cty.Number, Required: false},
		"name":             &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"type":             &hcldec.AttrSpec{Name: "type", Type: cty.String, Required: false},
		"datastore_id":     &hcldec.AttrSpec{Name: "datastore_id", Type: cty.Number, Required: false},
		"persistent":       &hcldec.AttrSpec{Name: "persistent", Type: cty.Bool, Required: false},
		"lock":             &hcldec.AttrSpec{Name: "lock", Type: cty.String, Required: false},
		"permissions":      &hcldec.AttrSpec{Name: "permissions", Type: cty.Number, Required: false},
		"group":            &hcldec.AttrSpec{Name: "group", Type: cty.String, Required: false},
		"path":             &hcldec.AttrSpec{Name: "path", Type: cty.String, Required: false},
		"dev_prefix":       &hcldec.AttrSpec{Name: "dev_prefix", Type: cty.String, Required: false},
		"target":           &hcldec.AttrSpec{Name: "target", Type: cty.String, Required: false},
		"driver":           &hcldec.AttrSpec{Name: "driver", Type: cty.String, Required: false},
		"format":           &hcldec.AttrSpec{Name: "format", Type: cty.String, Required: false},
		"size":             &hcldec.AttrSpec{Name: "size", Type: cty.Number, Required: false},
		"clone_from_image": &hcldec.AttrSpec{Name: "clone_from_image", Type: cty.String, Required: false},
		"tags":             &hcldec.AttrSpec{Name: "tags", Type: cty.List(cty.String), Required: false},
	}
	return s
}

// FlatNICConfig is an auto-generated flat version of NICConfig.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatNICConfig struct {
	Network *string `mapstructure:"network" cty:"network" hcl:"network"`
}

// FlatMapstructure returns a new FlatNICConfig.
// FlatNICConfig is an auto-generated flat version of NICConfig.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*NICConfig) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatNICConfig)
}

// HCL2Spec returns the hcl spec of a NICConfig.
// This spec is used by HCL to read the fields of NICConfig.
// The decoded values from this spec will then be applied to a FlatNICConfig.
func (*FlatNICConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"network": &hcldec.AttrSpec{Name: "network", Type: cty.String, Required: false},
	}
	return s
}

// FlatSnapshotConfig is an auto-generated flat version of SnapshotConfig.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatSnapshotConfig struct {
	Snapshot_Name        *string `mapstructure:"name" cty:"name" hcl:"name"`
	Snapshot_DatastoreID *int    `mapstructure:"datastore_id" cty:"datastore_id" hcl:"datastore_id"`
}

// FlatMapstructure returns a new FlatSnapshotConfig.
// FlatSnapshotConfig is an auto-generated flat version of SnapshotConfig.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*SnapshotConfig) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatSnapshotConfig)
}

// HCL2Spec returns the hcl spec of a SnapshotConfig.
// This spec is used by HCL to read the fields of SnapshotConfig.
// The decoded values from this spec will then be applied to a FlatSnapshotConfig.
func (*FlatSnapshotConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"name":         &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"datastore_id": &hcldec.AttrSpec{Name: "datastore_id", Type: cty.Number, Required: false},
	}
	return s
}
